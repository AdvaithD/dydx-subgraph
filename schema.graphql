type LogOperatorSet @entity {
  id: ID!
  owner: Bytes! # address
  operator: Bytes! # address
  trusted: Boolean! # bool
}

type OwnershipTransferred @entity {
  id: ID!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
}

type LogIndexUpdate @entity {
  id: ID!
  market: BigInt! # uint256
  index_borrow: BigInt! # uint96
  index_supply: BigInt! # uint96
  index_lastUpdate: BigInt! # uint32
}

type LogOperation @entity {
  id: ID!
  sender: Bytes! # address
}

type LogDeposit @entity {
  id: ID!
  accountOwner: Bytes! # address
  accountNumber: BigInt! # uint256
  market: BigInt! # uint256
  update_deltaWei_sign: Boolean! # bool
  update_deltaWei_value: BigInt! # uint256
  update_newPar_sign: Boolean! # bool
  update_newPar_value: BigInt! # uint128
  from: Bytes! # address
}

type LogWithdraw @entity {
  id: ID!
  accountOwner: Bytes! # address
  accountNumber: BigInt! # uint256
  market: BigInt! # uint256
  update_deltaWei_sign: Boolean! # bool
  update_deltaWei_value: BigInt! # uint256
  update_newPar_sign: Boolean! # bool
  update_newPar_value: BigInt! # uint128
  to: Bytes! # address
}

type LogTransfer @entity {
  id: ID!
  accountOneOwner: Bytes! # address
  accountOneNumber: BigInt! # uint256
  accountTwoOwner: Bytes! # address
  accountTwoNumber: BigInt! # uint256
  market: BigInt! # uint256
  updateOne_deltaWei_sign: Boolean! # bool
  updateOne_deltaWei_value: BigInt! # uint256
  updateOne_newPar_sign: Boolean! # bool
  updateOne_newPar_value: BigInt! # uint128
  updateTwo_deltaWei_sign: Boolean! # bool
  updateTwo_deltaWei_value: BigInt! # uint256
  updateTwo_newPar_sign: Boolean! # bool
  updateTwo_newPar_value: BigInt! # uint128
}

type LogBuy @entity {
  id: ID!
  accountOwner: Bytes! # address
  accountNumber: BigInt! # uint256
  takerMarket: BigInt! # uint256
  makerMarket: BigInt! # uint256
  takerUpdate_deltaWei_sign: Boolean! # bool
  takerUpdate_deltaWei_value: BigInt! # uint256
  takerUpdate_newPar_sign: Boolean! # bool
  takerUpdate_newPar_value: BigInt! # uint128
  makerUpdate_deltaWei_sign: Boolean! # bool
  makerUpdate_deltaWei_value: BigInt! # uint256
  makerUpdate_newPar_sign: Boolean! # bool
  makerUpdate_newPar_value: BigInt! # uint128
  exchangeWrapper: Bytes! # address
}

type LogSell @entity {
  id: ID!
  accountOwner: Bytes! # address
  accountNumber: BigInt! # uint256
  takerMarket: BigInt! # uint256
  makerMarket: BigInt! # uint256
  takerUpdate_deltaWei_sign: Boolean! # bool
  takerUpdate_deltaWei_value: BigInt! # uint256
  takerUpdate_newPar_sign: Boolean! # bool
  takerUpdate_newPar_value: BigInt! # uint128
  makerUpdate_deltaWei_sign: Boolean! # bool
  makerUpdate_deltaWei_value: BigInt! # uint256
  makerUpdate_newPar_sign: Boolean! # bool
  makerUpdate_newPar_value: BigInt! # uint128
  exchangeWrapper: Bytes! # address
}

type LogTrade @entity {
  id: ID!
  takerAccountOwner: Bytes! # address
  takerAccountNumber: BigInt! # uint256
  makerAccountOwner: Bytes! # address
  makerAccountNumber: BigInt! # uint256
  inputMarket: BigInt! # uint256
  outputMarket: BigInt! # uint256
  takerInputUpdate_deltaWei_sign: Boolean! # bool
  takerInputUpdate_deltaWei_value: BigInt! # uint256
  takerInputUpdate_newPar_sign: Boolean! # bool
  takerInputUpdate_newPar_value: BigInt! # uint128
  takerOutputUpdate_deltaWei_sign: Boolean! # bool
  takerOutputUpdate_deltaWei_value: BigInt! # uint256
  takerOutputUpdate_newPar_sign: Boolean! # bool
  takerOutputUpdate_newPar_value: BigInt! # uint128
  makerInputUpdate_deltaWei_sign: Boolean! # bool
  makerInputUpdate_deltaWei_value: BigInt! # uint256
  makerInputUpdate_newPar_sign: Boolean! # bool
  makerInputUpdate_newPar_value: BigInt! # uint128
  makerOutputUpdate_deltaWei_sign: Boolean! # bool
  makerOutputUpdate_deltaWei_value: BigInt! # uint256
  makerOutputUpdate_newPar_sign: Boolean! # bool
  makerOutputUpdate_newPar_value: BigInt! # uint128
  autoTrader: Bytes! # address
}

type LogCall @entity {
  id: ID!
  accountOwner: Bytes! # address
  accountNumber: BigInt! # uint256
  callee: Bytes! # address
}

type LogLiquidate @entity {
  id: ID!
  solidAccountOwner: Bytes! # address
  solidAccountNumber: BigInt! # uint256
  liquidAccountOwner: Bytes! # address
  liquidAccountNumber: BigInt! # uint256
  heldMarket: BigInt! # uint256
  owedMarket: BigInt! # uint256
  solidHeldUpdate_deltaWei_sign: Boolean! # bool
  solidHeldUpdate_deltaWei_value: BigInt! # uint256
  solidHeldUpdate_newPar_sign: Boolean! # bool
  solidHeldUpdate_newPar_value: BigInt! # uint128
  solidOwedUpdate_deltaWei_sign: Boolean! # bool
  solidOwedUpdate_deltaWei_value: BigInt! # uint256
  solidOwedUpdate_newPar_sign: Boolean! # bool
  solidOwedUpdate_newPar_value: BigInt! # uint128
  liquidHeldUpdate_deltaWei_sign: Boolean! # bool
  liquidHeldUpdate_deltaWei_value: BigInt! # uint256
  liquidHeldUpdate_newPar_sign: Boolean! # bool
  liquidHeldUpdate_newPar_value: BigInt! # uint128
  liquidOwedUpdate_deltaWei_sign: Boolean! # bool
  liquidOwedUpdate_deltaWei_value: BigInt! # uint256
  liquidOwedUpdate_newPar_sign: Boolean! # bool
  liquidOwedUpdate_newPar_value: BigInt! # uint128
}

type LogVaporize @entity {
  id: ID!
  solidAccountOwner: Bytes! # address
  solidAccountNumber: BigInt! # uint256
  vaporAccountOwner: Bytes! # address
  vaporAccountNumber: BigInt! # uint256
  heldMarket: BigInt! # uint256
  owedMarket: BigInt! # uint256
  solidHeldUpdate_deltaWei_sign: Boolean! # bool
  solidHeldUpdate_deltaWei_value: BigInt! # uint256
  solidHeldUpdate_newPar_sign: Boolean! # bool
  solidHeldUpdate_newPar_value: BigInt! # uint128
  solidOwedUpdate_deltaWei_sign: Boolean! # bool
  solidOwedUpdate_deltaWei_value: BigInt! # uint256
  solidOwedUpdate_newPar_sign: Boolean! # bool
  solidOwedUpdate_newPar_value: BigInt! # uint128
  vaporOwedUpdate_deltaWei_sign: Boolean! # bool
  vaporOwedUpdate_deltaWei_value: BigInt! # uint256
  vaporOwedUpdate_newPar_sign: Boolean! # bool
  vaporOwedUpdate_newPar_value: BigInt! # uint128
}

type LogWithdrawExcessTokens @entity {
  id: ID!
  token: Bytes! # address
  amount: BigInt! # uint256
}

type LogSetIsClosing @entity {
  id: ID!
  marketId: BigInt! # uint256
  isClosing: Boolean! # bool
}

type LogSetPriceOracle @entity {
  id: ID!
  marketId: BigInt! # uint256
  priceOracle: Bytes! # address
}

type LogSetInterestSetter @entity {
  id: ID!
  marketId: BigInt! # uint256
  interestSetter: Bytes! # address
}

type LogSetMarginPremium @entity {
  id: ID!
  marketId: BigInt! # uint256
  marginPremium_value: BigInt! # uint256
}

type LogSetSpreadPremium @entity {
  id: ID!
  marketId: BigInt! # uint256
  spreadPremium_value: BigInt! # uint256
}

type LogSetMarginRatio @entity {
  id: ID!
  marginRatio_value: BigInt! # uint256
}

type LogSetLiquidationSpread @entity {
  id: ID!
  liquidationSpread_value: BigInt! # uint256
}

type LogSetEarningsRate @entity {
  id: ID!
  earningsRate_value: BigInt! # uint256
}

type LogSetMinBorrowedValue @entity {
  id: ID!
  minBorrowedValue_value: BigInt! # uint256
}

type LogSetGlobalOperator @entity {
  id: ID!
  operator: Bytes! # address
  approved: Boolean! # bool
}

type LogOperatorSet1 @entity {
  id: ID!
  owner: Bytes! # address
  operator: Bytes! # address
  trusted: Boolean! # bool
}

type Market @entity {
  id: ID!
  marketId: BigInt! # uint256
  token: Bytes! # address
}
